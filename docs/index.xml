<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>melody documentation</title>
    <link>https://melody.sh/docs/index.xml</link>
    <description>Recent content on melody documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>melodyAPI docs</copyright>
    <lastBuildDate>Tue, 08 Mar 2016 21:07:13 +0100</lastBuildDate>
    <atom:link href="https://melody.sh/docs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Melody - Dependency Manager for Go</title>
      <link>https://melody.sh/docs/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://melody.sh/docs/</guid>
      <description>

&lt;p&gt;Melody is a tool that enables Go developers to manage project&amp;rsquo;s dependencies and ensure fast, consistent, and repeatable builds.  We&amp;rsquo;ve adopted the &lt;a href=&#34;#credits-and-inspiration&#34;&gt;following principles&lt;/a&gt; to make this happen:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All dependencies are vendored&lt;/strong&gt; to prevent multiple projects from clobbering shared repositories in GOPATH.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Human-friendly config file&lt;/strong&gt; explicitly specifies project details and dependencies with corresponding version restrictions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Human-readable lock file&lt;/strong&gt; to record and track exact revision of each installed repository.  This file is used to deterministically recreate the &lt;code&gt;vendor&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud-assisted repository indexing and caching&lt;/strong&gt; allows for much faster and more-reliable builds.  &lt;a href=&#34;https://melody.sh/api/&#34;&gt;melodyAPI&lt;/a&gt; integration makes sure your build is fast, and that a deleted repository or tag does not break future builds.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note that the &lt;a href=&#34;https://melody.sh/api/&#34;&gt;melodyAPI&lt;/a&gt; cloud cache may be cold during the beta period due to a low traffic.  This may cause slowness during your installs, but it will get faster as our userbase grows.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Melody requires Go 1.6+. Although it may work with GO15VENDOREXPERIMENT flag, Go 1.5 is not supported.&lt;/p&gt;

&lt;h2 id=&#34;installing-melody&#34;&gt;Installing Melody&lt;/h2&gt;

&lt;p&gt;Binary builds are available in the &lt;a href=&#34;https://github.com/melodysh/melody/releases&#34;&gt;Releases&lt;/a&gt; section of Melody GitHub repo.  For the latest unstable version, you can also &lt;a href=&#34;#building-from-source&#34;&gt;build from source&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Melody only needs a few simple commands to deliver a lot of power. To get started, please  &lt;s&gt;run &lt;a href=&#34;#contribution-and-improvements&#34;&gt;&lt;code&gt;melody init&lt;/code&gt;&lt;/a&gt;&lt;/s&gt; manually create a &lt;a href=&#34;#melodytoml&#34;&gt;&lt;code&gt;Melody.toml&lt;/code&gt;&lt;/a&gt; file and run &lt;code&gt;melody install&lt;/code&gt;.   All required repositories will be installed into the project&amp;rsquo;s &lt;code&gt;vendor&lt;/code&gt; subdirectory.&lt;/p&gt;

&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;melody install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re running this command for the first time, Melody will resolve the dependency graph via &lt;a href=&#34;https://melody.sh/api/&#34;&gt;melodyAPI&lt;/a&gt; and install the latest possible versions of each repository into the &lt;code&gt;vendor&lt;/code&gt; subdirectory.  It will also save the current state in the &lt;a href=&#34;#melodylock&#34;&gt;&lt;code&gt;Melody.lock&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;Locking dependency versions in &lt;code&gt;Melody.lock&lt;/code&gt; ensures that subsequent executions of the &lt;code&gt;install&lt;/code&gt; command will recreate the &lt;code&gt;vendor&lt;/code&gt; subdirectory with exactly the same versions of each dependency.  Whenever you try to recreate a project build, you should start with this command to return the project to the locked state.&lt;/p&gt;

&lt;p&gt;If you would like to update a particular dependency in the future, you can run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;melody update github.com/gin-gonic/gin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will try to make minimal changes to your lockfile while updating that particular dependency.  But if you&amp;rsquo;re feeling adventurous and would like to update everything, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;melody update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, you can peek at available updates without making any changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;melody outdated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it, for now.  Subsequent building and testing can be done via standard Go toolchain.&lt;/p&gt;

&lt;h2 id=&#34;project-layout&#34;&gt;Project layout&lt;/h2&gt;

&lt;p&gt;Melody integrates with the standard $GOPATH layout that you&amp;rsquo;ve been using, you just need to add &lt;code&gt;Melody.{toml|lock}&lt;/code&gt; files at the root of your project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$GOPATH/src/path/to/project
├── Melody.lock
├── Melody.toml
├── main.go
└── ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;melody-toml&#34;&gt;Melody.toml&lt;/h3&gt;

&lt;p&gt;Both configuration and lockfile are in &lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML&lt;/a&gt; configuration format.  Please take a look at &lt;a href=&#34;https://github.com/melodysh/melody/blob/master/Melody.toml&#34;&gt;&lt;code&gt;Melody.toml&lt;/code&gt;&lt;/a&gt; for this repository for an example with inline documentation on how to get started.&lt;/p&gt;

&lt;h3 id=&#34;melody-lock&#34;&gt;Melody.lock&lt;/h3&gt;

&lt;p&gt;The lockfile is auto-generated and should not be modified by hand.  We highly recommend committing this file into your repository to enable repeatable outcome of &lt;code&gt;melody install&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;specifying-dependency-restrictions&#34;&gt;Specifying dependency restrictions&lt;/h3&gt;

&lt;p&gt;When you specify dependencies in &lt;code&gt;Melody.toml&lt;/code&gt;, you can restrict to a range or an exact version/revision that Melody should install.  These versions are extracted from repository&amp;rsquo;s &lt;a href=&#34;http://semver.org&#34;&gt;SemVer&lt;/a&gt;-compatible tags or auto-generated by melodyAPI.  We support the following dependency restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;*&amp;quot;&lt;/code&gt; specifies the latest tagged release version&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;head&amp;quot;&lt;/code&gt; specifies the latest possible revision in main branch&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;1.2.3&amp;quot;&lt;/code&gt; will only install a specific version (tagged or auto-generated)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;#sha&amp;quot;&lt;/code&gt; will install a specific revision of the repo&lt;/li&gt;
&lt;li&gt;You can also use ranges similar to &lt;a href=&#34;https://github.com/npm/node-semver#ranges&#34;&gt;npm-semver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TODO: Expand SemVer range docs here&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;importing-local-dependencies&#34;&gt;Importing local dependencies&lt;/h3&gt;

&lt;p&gt;If you would like to import a package from another local repository, unfortunately at this time Melody cannot help you. Instead, we suggest temporarily removing that dependency from your &lt;code&gt;Melody.toml&lt;/code&gt; and &lt;code&gt;vendor&lt;/code&gt; subdirectory, and letting Go toolchain reference that local dependency via GOPATH.  Once you&amp;rsquo;ve pushed the local changes to the origin server, you can return to vendoring that dependency via Melody.&lt;/p&gt;

&lt;h2 id=&#34;contribution-and-improvements&#34;&gt;Contribution and Improvements&lt;/h2&gt;

&lt;p&gt;We encourage you to contribute to Melody! The current iteration of Melody is just a preview of what it could be.  We would like to add the following in the near future:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;code&gt;init&lt;/code&gt; command to initialize a project with a basic &lt;code&gt;Melody.toml&lt;/code&gt;&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;&lt;s&gt;&lt;code&gt;lint&lt;/code&gt; command to validate configuration and dependencies&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;&lt;s&gt;&lt;code&gt;init&lt;/code&gt; should be smarter about creating projects in $GOPATH/src&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;&lt;s&gt;Auto-extract and validate dependencies in &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;lint&lt;/code&gt;&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;Skip &amp;ldquo;Resolving&amp;rdquo; step for &lt;code&gt;install&lt;/code&gt; with an existing lockfile.&lt;/li&gt;
&lt;li&gt;Support for &lt;code&gt;[test-dependencies]&lt;/code&gt; group in &lt;code&gt;Melody.toml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Batch GraphQL queries for package info from melodyAPI&lt;/li&gt;
&lt;li&gt;Better error handling and messaging&lt;/li&gt;
&lt;li&gt;Clean-up and document public API&lt;/li&gt;
&lt;li&gt;More tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;building-from-source&#34;&gt;Building from source&lt;/h3&gt;

&lt;p&gt;Although you can use &lt;code&gt;go get&lt;/code&gt; to install Melody, we, of course, recommend using Melody to prepare the project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/melodysh/melody.git
$ cd melody; melody install
$ make build
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;running-tests&#34;&gt;Running tests&lt;/h3&gt;

&lt;p&gt;Once you have all the requirements to build Melody, you can run the tests after populating the test data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make install
$ make test
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;submitting-updates&#34;&gt;Submitting updates&lt;/h3&gt;

&lt;p&gt;If you would like to contribute to this project, just do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fork the repo on Github.&lt;/li&gt;
&lt;li&gt;Add your features and make commits to your forked repo.&lt;/li&gt;
&lt;li&gt;Make a pull request to this repo.&lt;/li&gt;
&lt;li&gt;Review will be done and changes will be requested.&lt;/li&gt;
&lt;li&gt;Once changes are done or no changes are required, pull request will be merged.&lt;/li&gt;
&lt;li&gt;The next release will have your changes in it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please take a look at the issues page if you want to get started.&lt;/p&gt;

&lt;p&gt;If you think it would be nice to have a particular feature that is presently not implemented, we would love to hear your ideas and consider working on it.  Just open an issue in Github.&lt;/p&gt;

&lt;h2 id=&#34;credits-and-inspiration&#34;&gt;Credits and inspiration&lt;/h2&gt;

&lt;p&gt;Aside from the dependencies specified in the &lt;code&gt;Melody.toml&lt;/code&gt; file that make Melody possible, we drew ideas, inspiration, and sometimes ported code directly from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bundler.io&#34;&gt;Bundler&lt;/a&gt; - Ruby dependency manager&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.crates.io&#34;&gt;Cargo&lt;/a&gt; - Rust dependency manager&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getcomposer.org&#34;&gt;Composer&lt;/a&gt; - PHP dependency manager&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Melody was started as an internal project at &lt;a href=&#34;https://gemfury.com&#34;&gt;Gemfury&lt;/a&gt;, and the company will continue to sponsor its maintenance and future development.&lt;/p&gt;

&lt;h2 id=&#34;questions&#34;&gt;Questions&lt;/h2&gt;

&lt;p&gt;Please use the &lt;a href=&#34;http://stackoverflow.com/questions/ask?tags=melody&#34;&gt;tag &amp;ldquo;melody&amp;rdquo; on StackOverflow&lt;/a&gt; or &lt;a href=&#34;https://github.com/melodysh/melody/issues&#34;&gt;file a Github Issue&lt;/a&gt; if you have any other questions or problems.&lt;/p&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Melody is Copyright © 2016 Michael Rykov. See LICENSE file for terms of use and redistribution.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>