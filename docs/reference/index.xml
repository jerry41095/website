<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>References on melody documentation</title>
    <link>https://melody.sh/docs/reference/index.xml</link>
    <description>Recent content in References on melody documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>melody docs</copyright>
    <lastBuildDate>Tue, 08 Mar 2016 21:07:13 +0100</lastBuildDate>
    <atom:link href="https://melody.sh/docs/reference/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go project layout</title>
      <link>https://melody.sh/docs/reference/layout/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://melody.sh/docs/reference/layout/</guid>
      <description>

&lt;p&gt;Melody integrates with the standard $GOPATH layout that you&amp;rsquo;ve been using, you just need to add &lt;code&gt;Melody.{toml|lock}&lt;/code&gt; files at the root of your project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$GOPATH/src/path/to/project
├── Melody.lock
├── Melody.toml
├── main.go
├── ...
└── vendor/...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;melody-toml&#34;&gt;Melody.toml&lt;/h3&gt;

&lt;p&gt;Both configuration and lockfile are in &lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML&lt;/a&gt; configuration format.  Please take a look at &lt;a href=&#34;https://github.com/mdy/melody/blob/master/Melody.toml&#34;&gt;&lt;code&gt;Melody.toml&lt;/code&gt;&lt;/a&gt; for this repository for an example with inline documentation on how to get started.&lt;/p&gt;

&lt;h3 id=&#34;melody-lock&#34;&gt;Melody.lock&lt;/h3&gt;

&lt;p&gt;The lockfile is auto-generated and should not be modified by hand.  We highly recommend committing this file into your repository to enable repeatable outcome of &lt;code&gt;melody install&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;vendor&#34;&gt;vendor/&amp;hellip;&lt;/h3&gt;

&lt;p&gt;The vendor directory is managed by Melody and will contain all of your dependencies as specified in &lt;code&gt;Melody.toml&lt;/code&gt; and locked via &lt;code&gt;Melody.lock&lt;/code&gt;. We make no assumptions on whether you want to commit your dependencies into your repository, or restore them via &lt;code&gt;melody install&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Specifying dependencies</title>
      <link>https://melody.sh/docs/reference/dependencies/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://melody.sh/docs/reference/dependencies/</guid>
      <description>

&lt;p&gt;When you specify dependencies in &lt;code&gt;Melody.toml&lt;/code&gt;, you can restrict to a range or an exact version/revision that Melody should install.  These versions are extracted from repository&amp;rsquo;s &lt;a href=&#34;http://semver.org&#34;&gt;SemVer&lt;/a&gt;-compatible tags or auto-generated by melodyAPI.  We support the following dependency restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;*&amp;quot;&lt;/code&gt; specifies the latest tagged release version&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;head&amp;quot;&lt;/code&gt; specifies the latest possible revision in main branch&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;1.2.3&amp;quot;&lt;/code&gt; will only install a specific version (tagged or auto-generated)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;#sha&amp;quot;&lt;/code&gt; will install a specific revision of the repo&lt;/li&gt;
&lt;li&gt;You can also use ranges similar to &lt;a href=&#34;https://github.com/npm/node-semver#ranges&#34;&gt;npm-semver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TODO: Expand SemVer range docs here&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;importing-local-dependencies&#34;&gt;Importing local dependencies&lt;/h3&gt;

&lt;p&gt;If you would like to import a package from another local repository, unfortunately at this time Melody cannot help you. Instead, we suggest temporarily removing that dependency from your &lt;code&gt;Melody.toml&lt;/code&gt; and &lt;code&gt;vendor&lt;/code&gt; subdirectory, and letting Go toolchain reference that local dependency via GOPATH.  Once you&amp;rsquo;ve pushed the local changes to the origin server, you can return to vendoring that dependency via Melody.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>